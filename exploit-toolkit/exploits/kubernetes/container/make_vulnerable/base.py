from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Dict, List, Optional

from ..core.k8s_client import K8sClient
from ..core.logger import SecurityLogger
from ..core.logger import setup_logger


@dataclass
class ExploitResult:
    """Result of an exploit attempt."""

    success: bool
    message: str
    evidence: List[str] | None = None
    impact: List[str] | None = None


class BaseExploit(ABC):
    """Base class for all security exploits."""

    name: str = ""
    risk_level: str = "MEDIUM"
    vulnerability_type: str = ""
    description: str = ""

    def __init__(
        self,
        k8s_client: K8sClient,
        service: Optional[str] = None,
        logger: Optional[SecurityLogger] = None,
    ):
        self.k8s = k8s_client
        self.service = service or self.get_default_service()
        self.logger = logger or SecurityLogger(setup_logger(__name__))

    @abstractmethod
    def get_default_service(self) -> str:
        """Get the default service for this exploit."""
        pass

    @abstractmethod
    def get_vulnerable_patch(self) -> List[Dict]:
        """Get JSON patch to make service vulnerable."""
        pass

    @abstractmethod
    def get_secure_patch(self) -> List[Dict]:
        """Get JSON patch to secure service."""
        pass

    @abstractmethod
    def check_vulnerability(self) -> bool:
        """Check if service is vulnerable."""
        pass

    @abstractmethod
    def demonstrate(self) -> ExploitResult:
        """Demonstrate the exploit."""
        pass

    def show_info(self) -> None:
        """Display exploit information."""
        print(f"""
                {"=" * 45}
                {self.name} Exploit
                {"=" * 45}
                Target: {self.service}
                Risk: {self.risk_level}

                {self.description}
                {"=" * 45}
            """)

    def make_vulnerable(self, dry_run: bool = False) -> bool:
        """Apply vulnerable configuration."""
        self.logger.info(f"Applying vulnerable configuration to {self.service}...")
        patches = self.get_vulnerable_patch()

        if self.k8s.patch_deployment(self.service, patches, dry_run):
            if not dry_run:
                self.logger.success(
                    f"Applied vulnerable configuration to {self.service}"
                )
            return True
        return False

    def make_secure(self, dry_run: bool = False) -> bool:
        """Apply secure configuration."""
        self.logger.info(f"Applying secure configuration to {self.service}...")
        patches = self.get_secure_patch()

        # Pre-create security context if needed
        self._ensure_security_context()

        if self.k8s.patch_deployment(self.service, patches, dry_run):
            if not dry_run:
                self.logger.success(f"Applied secure configuration to {self.service}")
            return True
        return False

    def _ensure_security_context(self) -> None:
        """Ensure security context exists before patching."""
        deployment = self.k8s.get_deployment(self.service)
        if not deployment:
            return

        if (
            deployment.spec
            and deployment.spec.template
            and deployment.spec.template.spec
        ):
            containers = deployment.spec.template.spec.containers or []
            for i, container in enumerate(containers):
                if not container.security_context:
                    self.k8s.patch_deployment(
                        self.service,
                        [
                            {
                                "op": "add",
                                "path": f"/spec/template/spec/containers/{i}/securityContext",
                                "value": {},
                            }
                        ],
                    )

    def run_interactive(self) -> None:
        """Run interactive demonstration."""
        self.show_info()

        if not self.check_vulnerability():
            response = input("Service is not vulnerable. Make it vulnerable? (y/n) ")
            if response.lower() == "y":
                self.make_vulnerable()
                print()
                import time

                time.sleep(2)

        result = self.demonstrate()

        if result.evidence:
            print("\nEvidence:")
            for evidence in result.evidence:
                print(f"  • {evidence}")

        if result.impact:
            print("\nImpact:")
            for impact in result.impact:
                print(f"  • {impact}")

    def build_security_context_patch(self, container_idx: int = 0) -> List[Dict]:
        """Build a base security context patch."""
        return [
            {
                "op": "add",
                "path": f"/spec/template/spec/containers/{container_idx}/securityContext",
                "value": {},
            }
        ]

    def build_privileged_patch(self, container_idx: int = 0) -> List[Dict]:
        """Build patches for privileged mode."""
        patches = self.build_security_context_patch(container_idx)
        patches.extend(
            [
                {
                    "op": "add",
                    "path": f"/spec/template/spec/containers/{container_idx}/securityContext/privileged",
                    "value": True,
                },
                {
                    "op": "add",
                    "path": f"/spec/template/spec/containers/{container_idx}/securityContext/allowPrivilegeEscalation",
                    "value": True,
                },
            ]
        )
        return patches
