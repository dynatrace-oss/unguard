from typing import Dict, List

from .base import BaseExploit, ExploitResult


class MissingResourceLimitsExploit(BaseExploit):
    """Exploit for missing resource limits misconfiguration."""

    name = "Missing Resource Limits"
    risk_level = "MEDIUM-HIGH"
    vulnerability_type = "missing-resource-limits"
    description = """This exploit demonstrates how missing resource limits can:

                    - Enable denial-of-service attacks
                    - Cause node instability
                    - Impact other workloads
                    - Lead to cascading failures
                    - Result in excessive cloud costs

                    Without proper limits, a single container can consume
                    all available CPU and memory on a node, affecting all
                    other workloads and potentially crashing the node.

                    NOTE: This demonstration shows the POTENTIAL for resource exhaustion
                    without actually performing it, to maintain cluster stability."""

    def get_default_service(self) -> str:
        return "unguard-membership-service"

    def get_vulnerable_patch(self) -> List[Dict]:
        return [{"op": "remove", "path": "/spec/template/spec/containers/0/resources"}]

    def get_secure_patch(self) -> List[Dict]:
        return [
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext",
                "value": {},
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/runAsNonRoot",
                "value": True,
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/runAsUser",
                "value": 1000,
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/allowPrivilegeEscalation",
                "value": False,
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/capabilities",
                "value": {"drop": ["ALL"]},
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/resources",
                "value": {
                    "limits": {"memory": "256Mi", "cpu": "200m"},
                    "requests": {"memory": "128Mi", "cpu": "100m"},
                },
            },
        ]

    def check_vulnerability(self) -> bool:
        """Check if service has resource limits."""
        pod_name = self.k8s.find_pod_for_service(self.service)
        if not pod_name:
            return False

        try:
            pod = self.k8s.v1.read_namespaced_pod(pod_name, self.k8s.namespace)
            container = pod.spec.containers[0]  # type: ignore[attr-defined]

            # Check for missing resource limits
            if not container.resources or not container.resources.limits:
                return True

            return False
        except Exception:
            return False

    def demonstrate(self) -> ExploitResult:
        """Demonstrate actual resource consumption without limits."""
        self.logger.exploit("Demonstrating missing resource limits vulnerability...")

        pod_name = self.k8s.find_pod_for_service(self.service)
        if not pod_name:
            return ExploitResult(
                success=False,
                message="Pod not found for service",
            )

        evidence = []
        impact = []

        # Test 1: Verify no limits
        self.logger.exploit("Test 1: Verifying no resource limits")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                # Check memory limits
                if [ -f /sys/fs/cgroup/memory.max ]; then
                    limit=$(cat /sys/fs/cgroup/memory.max 2>/dev/null)
                    [ "$limit" = "max" ] && echo "❌ VULNERABLE: No memory limit" || echo "✅ Memory limit: $limit"
                elif [ -f /sys/fs/cgroup/memory/memory.limit_in_bytes ]; then
                    limit=$(cat /sys/fs/cgroup/memory/memory.limit_in_bytes 2>/dev/null)
                    [ "$limit" = "9223372036854771712" ] && echo "❌ VULNERABLE: No memory limit" || echo "✅ Memory limit: $limit"
                fi
                
                # Check CPU limits
                if [ -f /sys/fs/cgroup/cpu.max ]; then
                    cpu_max=$(cat /sys/fs/cgroup/cpu.max 2>/dev/null)
                    [ "$cpu_max" = "max 100000" ] && echo "❌ VULNERABLE: No CPU limit" || echo "✅ CPU limit: $cpu_max"
                elif [ -f /sys/fs/cgroup/cpu/cpu.cfs_quota_us ]; then
                    quota=$(cat /sys/fs/cgroup/cpu/cpu.cfs_quota_us 2>/dev/null)
                    [ "$quota" = "-1" ] && echo "❌ VULNERABLE: No CPU limit" || echo "✅ CPU limit: $quota"
                fi
                """,
            )
            print(result)

            if "No memory limit" in result:
                evidence.append("No memory limits configured")
            if "No CPU limit" in result:
                evidence.append("No CPU limits configured")

        except Exception as e:
            self.logger.error(f"Test 1 failed: {e}")

        # Test 2: Actual memory consumption
        self.logger.exploit("Test 2: Memory consumption (50MB for 5 seconds)")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Baseline memory:"
                cat /proc/meminfo | grep -E "^MemFree|^MemAvailable" | awk '{print "  " $1 " " int($2/1024) "MB"}'
                
                echo -e "\\n[*] Allocating 50MB..."
                # Create a 50MB file in memory
                dd if=/dev/zero of=/dev/shm/test_mem bs=1M count=50 2>/dev/null
                
                echo -e "\\n[*] Memory after allocation:"
                cat /proc/meminfo | grep -E "^MemFree|^MemAvailable" | awk '{print "  " $1 " " int($2/1024) "MB"}'
                
                sleep 5
                rm -f /dev/shm/test_mem
                echo -e "\\n✅ Successfully allocated and held 50MB without limits"
                """,
            )
            print(result)

            if "Successfully allocated" in result:
                evidence.append("Allocated 50MB memory without restrictions")
                impact.append("Uncontrolled memory allocation demonstrated")

        except Exception as e:
            self.logger.error(f"Test 2 failed: {e}")

        # Test 3: Actual CPU consumption
        self.logger.exploit("Test 3: CPU consumption (2 cores for 3 seconds)")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Starting CPU load on 2 cores..."
                
                # Function to burn CPU
                burn_cpu() {
                    local end=$(($(date +%s) + 3))
                    local count=0
                    while [ $(date +%s) -lt $end ]; do
                        echo "scale=10; 4*a(1)" | bc -l > /dev/null 2>&1 || count=$((count+count+1))
                    done
                    echo "  Core $1: Completed"
                }
                
                # Run on 2 cores
                burn_cpu 1 &
                burn_cpu 2 &
                wait
                
                echo "✅ Successfully consumed CPU on 2 cores without limits"
                """,
            )
            print(result)

            if "Successfully consumed CPU" in result:
                evidence.append("Consumed CPU on multiple cores without restrictions")
                impact.append("Uncontrolled CPU consumption demonstrated")

        except Exception as e:
            self.logger.error(f"Test 3 failed: {e}")

        # Test 4: Process creation
        self.logger.exploit("Test 4: Process creation (20 processes)")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Current process count: $(ps | wc -l)"
                
                echo "[*] Creating 20 background processes..."
                for i in $(seq 1 20); do
                    sleep 30 &
                done
                
                echo "[*] New process count: $(ps | wc -l)"
                echo "✅ Successfully created multiple processes without limits"
                
                # Clean up
                pkill -f "sleep 30" 2>/dev/null || true
                """,
            )
            print(result)

            if "Successfully created" in result:
                evidence.append("Created multiple processes without restrictions")
                impact.append("No process limits enforced")

        except Exception as e:
            self.logger.error(f"Test 4 failed: {e}")

        # Test 5: Node capacity check
        self.logger.exploit("Test 5: Node capacity check")
        try:
            pod = self.k8s.v1.read_namespaced_pod(pod_name, self.k8s.namespace)
            node_name = pod.spec.node_name  # type: ignore[attr-defined]
            node = self.k8s.v1.read_node(node_name)

            cpu_capacity = node.status.capacity.get("cpu", "unknown")  # type: ignore[attr-defined]
            memory_bytes = node.status.capacity.get("memory", "0Ki")  # type: ignore[attr-defined]

            # Convert memory to GB
            if memory_bytes.endswith("Ki"):
                memory_gb = int(memory_bytes[:-2]) / (1024 * 1024)
            else:
                memory_gb = 0

            print(f"\n[*] Node: {node_name}")
            print(f"[*] Total capacity: {cpu_capacity} CPUs, {memory_gb:.1f}GB memory")
            print("[*] This container could consume ALL of these resources!")

            evidence.append(
                f"Access to {cpu_capacity} CPUs and {memory_gb:.1f}GB memory on node"
            )

        except Exception as e:
            self.logger.error(f"Test 5 failed: {e}")

        # Summary
        self.logger.exploit("\n=== Summary ===")
        print("Without resource limits:")
        print("  ✓ Allocated 50MB memory freely")
        print("  ✓ Consumed 2 CPU cores freely")
        print("  ✓ Created 20 processes freely")
        print("  ✓ No restrictions on resource usage")
        print("\nRisk: Any container can exhaust node resources causing:")
        print("  - Pod evictions")
        print("  - Service outages")
        print("  - Increased cloud costs")

        return ExploitResult(
            success=bool(evidence),
            message="Successfully demonstrated missing resource limits vulnerability",
            evidence=evidence,
            impact=impact,
        )
