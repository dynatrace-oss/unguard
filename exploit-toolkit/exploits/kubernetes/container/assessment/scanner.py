from typing import List
from rich.table import Table
from ..core.logger import SecurityLogger, console
from ..core.k8s_client import K8sClient
from kubernetes.client import V1Deployment, V1PodSecurityContext, V1SecurityContext


class SecurityScanner:
    """Scanner for assessing security posture of Kubernetes deployments."""

    def __init__(self, k8s_client: K8sClient, logger: SecurityLogger):
        self.k8s = k8s_client
        self.logger = logger

    def assess_service(self, service: str) -> List[str]:
        """Assess security posture of a single service."""
        console.print(f"\n[green]--- {service} ---[/green]")

        # Check if deployment exists
        deployment = self.k8s.get_deployment(service)
        if not deployment:
            self.logger.warning(f"Deployment {service} not found")
            return []

        # Extract security contexts
        pod_spec = deployment.spec.template.spec  # type: ignore[attr-defined]
        container = pod_spec.containers[0]

        # Pod Security Context
        console.print("Pod Security Context:")
        if not pod_spec.security_context:
            console.print("  ‚ö†Ô∏è  No pod security context defined")
        else:
            self._print_security_context(pod_spec.security_context, indent=2)

        # Container Security Context
        console.print("Container Security Context:")
        if not container.security_context:
            console.print("  ‚ö†Ô∏è  No container security context defined")
        else:
            self._print_security_context(container.security_context, indent=2)

        # Resource Limits
        console.print("Resource Configuration:")
        if not container.resources or not container.resources.limits:
            console.print("  ‚ùå No resource limits set")
        else:
            self._print_resources(container.resources, indent=2)

        # Check runtime state
        pod_name = self.k8s.find_pod_for_service(service)
        if pod_name:
            self._assess_runtime_state(pod_name)
        else:
            console.print("Runtime State: ‚ùå No running pod found")

        return self._get_service_issues(deployment)

    def assess_all_services(self, services: List[str]) -> None:
        """Assess all services."""
        self.logger.info("Assessing container security posture...")
        console.print("\n[bold]=== Security Context Analysis ===[/bold]")

        for service in services:
            self.assess_service(service)

        console.print("\nüí° [bold]Security Recommendations:[/bold]")
        console.print("  ‚Ä¢ All containers should have explicit security contexts")
        console.print("  ‚Ä¢ Use runAsNonRoot: true and specify runAsUser")
        console.print("  ‚Ä¢ Drop all capabilities and add only what's needed")
        console.print("  ‚Ä¢ Set resource requests and limits")
        console.print("  ‚Ä¢ Avoid host namespace sharing unless absolutely necessary")

    def quick_security_check(self, services: List[str]) -> None:
        """Quick security check for all services."""
        results = []

        for service in services:
            deployment = self.k8s.get_deployment(service)
            if not deployment:
                results.append((service, ["Not found"], False))
                continue

            issues = self._get_service_issues(deployment)

            if not issues:
                results.append((service, ["Secure"], True))
            else:
                results.append((service, issues, False))

        # Display table
        table = Table(title="Security Status")
        table.add_column("Service", style="cyan")
        table.add_column("Status", style="white")

        for service, issues, secure in results:
            status = "‚úÖ " + ", ".join(issues) if secure else "‚ö†Ô∏è  " + ", ".join(issues)
            table.add_row(service, status)

        console.print(table)

    def _get_service_issues(self, deployment: V1Deployment) -> List[str]:
        """Get security issues for a deployment."""
        issues = []

        pod_spec = deployment.spec.template.spec  # type: ignore[attr-defined]
        container = pod_spec.containers[0]

        # Check privileged
        if (
            container.security_context
            and isinstance(container.security_context, V1SecurityContext)
            and container.security_context.privileged
        ):
            issues.append("Privileged")

        # Check capabilities
        if (
            container.security_context
            and container.security_context.capabilities
            and container.security_context.capabilities.add
        ):
            issues.append("Dangerous Caps")

        # Check host access
        if pod_spec.host_pid or pod_spec.host_network or pod_spec.host_ipc:
            issues.append("Host Access")

        # Check resource limits
        if not container.resources or not container.resources.limits:
            issues.append("No Limits")

        return issues

    def _assess_runtime_state(self, pod_name: str) -> None:
        """Assess runtime state of a pod."""
        console.print("Runtime State:")

        try:
            # Get the pod details to identify the container name
            pod = self.k8s.v1.read_namespaced_pod(pod_name, self.k8s.namespace)
            container_name = (
                pod.spec.containers[0].name if pod.spec.containers else None  # type: ignore[attr-defined]
            )

            if not container_name:
                console.print("  ‚ö†Ô∏è  No container found in the pod")
                return

            # Get actual user
            user_info = self.k8s.exec_in_pod(
                pod_name, "id", container=container_name
            ).strip()
            console.print(f"  Running as: {user_info}")

            # Check capabilities
            caps = self.k8s.exec_in_pod(
                pod_name, "cat /proc/1/status | grep ^Cap", container=container_name
            )
            if caps:
                console.print("  Capabilities:")
                for line in caps.strip().split("\n"):
                    console.print(f"    {line}")

                # Check for dangerous capabilities
                if "CapEff:" in caps:
                    cap_line = [line for line in caps.split("\n") if "CapEff:" in line][
                        0
                    ]
                    cap_value = cap_line.split()[1]
                    if cap_value != "0000000000000000":
                        console.print("    ‚ö†Ô∏è  Non-zero effective capabilities detected")

            # Check host access
            if pod.spec.host_pid or pod.spec.host_network:  # type: ignore[attr-defined]
                console.print("  ‚ö†Ô∏è  Host namespace access:")
                if pod.spec.host_pid:  # type: ignore[attr-defined]
                    console.print("    - hostPID: true")
                if pod.spec.host_network:  # type: ignore[attr-defined]
                    console.print("    - hostNetwork: true")

        except Exception as e:
            console.print(f"  Error checking runtime state: {e}")

    def _print_security_context(self, sec_context, indent: int = 0) -> None:
        """Displaying security context."""
        prefix = " " * indent

        if isinstance(sec_context, V1PodSecurityContext):
            attrs = [
                ("runAsUser", sec_context.run_as_user),
                ("runAsNonRoot", sec_context.run_as_non_root),
            ]
        elif isinstance(sec_context, V1SecurityContext):
            attrs = [
                ("runAsUser", sec_context.run_as_user),
                ("runAsNonRoot", sec_context.run_as_non_root),
                ("privileged", sec_context.privileged),
                ("allowPrivilegeEscalation", sec_context.allow_privilege_escalation),
                ("readOnlyRootFilesystem", sec_context.read_only_root_filesystem),
            ]
            if sec_context.capabilities:
                console.print(f"{prefix}capabilities:")
                if sec_context.capabilities.add:
                    console.print(f"{prefix}  add: {sec_context.capabilities.add}")
                if sec_context.capabilities.drop:
                    console.print(f"{prefix}  drop: {sec_context.capabilities.drop}")
        else:
            console.print(f"{prefix}Unknown security context type")
            return

        for name, value in attrs:
            if value is not None:
                console.print(f"{prefix}{name}: {value}")

    def _print_resources(self, resources, indent: int = 0) -> None:
        """Displaying resource configuration."""
        prefix = " " * indent

        if not resources:
            console.print(f"{prefix}‚ùå No resource configuration available")
            return

        # Debugging the structure of resources
        self.logger.debug(f"Resources structure: {resources}")

        # Print limits
        if resources.limits:
            console.print(f"{prefix}limits:")
            if hasattr(resources.limits, "get"):
                if resources.limits.get("memory"):
                    console.print(f"{prefix}  memory: {resources.limits['memory']}")
                if resources.limits.get("cpu"):
                    console.print(f"{prefix}  cpu: {resources.limits['cpu']}")
            else:
                if hasattr(resources.limits, "memory") and resources.limits.memory:
                    console.print(f"{prefix}  memory: {resources.limits.memory}")
                if hasattr(resources.limits, "cpu") and resources.limits.cpu:
                    console.print(f"{prefix}  cpu: {resources.limits.cpu}")

        # Print requests
        if resources.requests:
            console.print(f"{prefix}requests:")
            if hasattr(resources.requests, "get"):
                if resources.requests.get("memory"):
                    console.print(f"{prefix}  memory: {resources.requests['memory']}")
                if resources.requests.get("cpu"):
                    console.print(f"{prefix}  cpu: {resources.requests['cpu']}")
            else:
                if hasattr(resources.requests, "memory") and resources.requests.memory:
                    console.print(f"{prefix}  memory: {resources.requests.memory}")
                if hasattr(resources.requests, "cpu") and resources.requests.cpu:
                    console.print(f"{prefix}  cpu: {resources.requests.cpu}")
