import subprocess
import time

from ..core.k8s_client import K8sClient
from ..core.logger import SecurityLogger


class DeploymentManager:
    """Manages Unguard deployment operations."""

    def __init__(self, k8s_client: K8sClient, logger: SecurityLogger):
        self.k8s = k8s_client
        self.logger = logger

    def deploy_unguard(self) -> bool:
        """Deploy Unguard application using Helm."""
        self.logger.info("Checking for existing Unguard deployment...")

        # Check if already deployed
        result = subprocess.run(
            ["helm", "list", "-n", self.k8s.namespace], capture_output=True, text=True
        )

        if "unguard" in result.stdout:
            self.logger.warning(
                f"Unguard already deployed in namespace {self.k8s.namespace}"
            )
            response = input("Upgrade existing deployment? (y/n) ")
            if response.lower() != "y":
                return True
            helm_action = "upgrade"
        else:
            helm_action = "install"

        # Create namespace if needed
        try:
            self.k8s.v1.read_namespace(self.k8s.namespace)
        except Exception:
            self.logger.info(f"Creating namespace {self.k8s.namespace}...")
            self.k8s.v1.create_namespace(
                body={"metadata": {"name": self.k8s.namespace}}
            )

        # Deploy using Helm
        self.logger.info("Deploying Unguard using Helm...")

        cmd = [
            "helm",
            helm_action,
            "unguard",
            "oci://ghcr.io/dynatrace-oss/unguard/chart/unguard",
            "-n",
            self.k8s.namespace,
            "--create-namespace",
            "--wait",
            "--timeout",
            "300s",
        ]

        result = subprocess.run(cmd, capture_output=True, text=True)

        if result.returncode == 0:
            self.logger.success("Unguard deployed successfully")
            self._wait_for_pods()
            return True
        else:
            self.logger.error(f"Failed to deploy Unguard: {result.stderr}")

            # Try GitHub clone method
            self.logger.warning("Trying GitHub clone method...")
            return self._deploy_from_github()

    def _deploy_from_github(self) -> bool:
        """Deploy from GitHub repository."""
        import tempfile
        import os

        with tempfile.TemporaryDirectory() as tmpdir:
            # Clone repository
            clone_cmd = [
                "git",
                "clone",
                "--depth",
                "1",
                "https://github.com/dynatrace-oss/unguard.git",
                tmpdir,
            ]

            result = subprocess.run(clone_cmd, capture_output=True)
            if result.returncode != 0:
                self.logger.error("Failed to clone repository")
                return False

            # Deploy from local chart
            chart_path = os.path.join(tmpdir, "chart", "unguard")
            if os.path.exists(chart_path):
                deploy_cmd = [
                    "helm",
                    "install",
                    "unguard",
                    chart_path,
                    "-n",
                    self.k8s.namespace,
                    "--create-namespace",
                    "--wait",
                    "--timeout",
                    "300s",
                ]

                result = subprocess.run(deploy_cmd, capture_output=True)
                if result.returncode == 0:
                    self.logger.success("Unguard deployed from GitHub")
                    self._wait_for_pods()
                    return True

        self.logger.error("Failed to deploy Unguard")
        return False

    def _wait_for_pods(self) -> None:
        """Wait for Unguard pods to be ready."""
        self.logger.info("Waiting for Unguard pods to be ready...")

        start_time = time.time()
        timeout = 300

        # Initialize pods before the loop
        pods = self.k8s.v1.list_namespaced_pod(
            self.k8s.namespace, label_selector="app.kubernetes.io/instance=unguard"
        )

        while time.time() - start_time < timeout:
            pods = self.k8s.v1.list_namespaced_pod(
                self.k8s.namespace, label_selector="app.kubernetes.io/instance=unguard"
            )

            ready_pods = sum(
                1
                for pod in pods.items
                if pod.status.phase == "Running"
                and all(c.ready for c in pod.status.container_statuses or [])
            )

            if ready_pods == len(pods.items) and ready_pods > 0:
                self.logger.success("All Unguard pods are ready")
                break

            time.sleep(5)
        else:
            self.logger.warning("Some pods may not be ready yet")

        # Show pod status - now pods is guaranteed to be defined
        print("\n")
        for pod in pods.items:
            status = "Ready" if pod.status.phase == "Running" else pod.status.phase
            print(f"{pod.metadata.name}: {status}")

    def uninstall_unguard(self) -> bool:
        """Uninstall Unguard release."""
        self.logger.warning(
            f"Uninstalling Unguard from namespace {self.k8s.namespace}..."
        )

        cmd = ["helm", "uninstall", "unguard", "-n", self.k8s.namespace, "--wait"]
        result = subprocess.run(cmd, capture_output=True, text=True)

        if result.returncode == 0:
            self.logger.success("Unguard uninstalled successfully")
            return True
        else:
            self.logger.error(f"Failed to uninstall Unguard: {result.stderr}")
            return False
